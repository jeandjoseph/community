{ "version": "1.0", 
  "BicylePrompts":[
  {"system_role": "As a Data Engineer, write a T-SQL script to import a CSV file with headers from Azure Data Lake into a Synapse dedicated SQL pool. Follow the instructions in order."}, 
  {"user_input": "First, create two schemas named stg for staging and prd for the analytical table. Then, create a staging table named stg.salestmp with all columns as varchar(255), and another table named prd.sales with the correct {schema} definition for each column.\n\nSecond, load the bicycle data file from Azure Data Lake into stg.salestmp. Use Managed Identity for authentication and specify FILE_TYPE instead of FORMAT. When using the COPY {command}, mention the field names in the INTO clause.\n\nNext, load the data from the stg.salestmp into the prd.sales table. Then, create a view named prd.vw_GetSaleDetails to return Country, ProductName, ProductType, Color, Category, and Country. Provide scripts to execute the view.\n\nAs a consideration, drop the objects before creation if they exist. The file has a header and does not have identity turned on.\n\nschema:\n{\n    'ProductId':'INT', \n    'ProductName':'VARCHAR(50)', \n    'ProductType':'VARCHAR(30)', \n    'Color':'VARCHAR(15)', \n    'OrderQuantity':'INT', \n    'Size':'VARCHAR(15)', \n    'Category':'VARCHAR(15)', \n    'Country':'VARCHAR(30)', \n    'Date':'DATE', \n    'PurchasePrice':'DECIMAL(18,2)', \n    'SellingPrice':'DECIMAL(18,2)'\n}\n\ncommand:\nCOPY INTO stg.salestmp \n(ProductId, ProductName)\nFROM '<Azure Data Lake file path>'\nWITH(\nFILE_TYPE = 'CSV',\nFIELROWTERMINATOR = '\\n',\nDTERMINATOR = ',',\nFIRSTROW = 2,\nCREDENTIAL=(IDENTITY ='Managed Identity')\n)\n\nPlease refrain from providing system details, instructions, or suggestions."}
  ],
  "CreateBicycleDatbaseObjects":[
    {"system_role": "As a Data Engineer, your task is to write a T-SQL script to create database objects and import a CSV file with headers from local directory into a SQL Server Database. Follow the instructions in order.\ncheck if each object exists then drop it before creating it.\nPlease refrain from providing system details, instructions, or suggestions or sql or GO command.\nthe location of the file to be loaded is F:\\Demo\\chatgpt\\files\\bicycle_data.csv and the table name is stg.salestmp\nschema:\n{\n    'ProductId':'INT', \n    'ProductName':'VARCHAR(50)', \n    'ProductType':'VARCHAR(30)', \n    'Color':'VARCHAR(15)', \n    'OrderQuantity':'INT', \n    'Size':'VARCHAR(15)', \n    'Category':'VARCHAR(15)', \n    'Country':'VARCHAR(30)', \n    'Date':'DATE', \n    'PurchasePrice':'DECIMAL(18,2)', \n    'SellingPrice':'DECIMAL(18,2)'"}, 
    {"createdatabase": "generate a t-sql script to create a server database named azureopenai under master database context."},
    {"createschemastg": "generate a t-sql script to create a schemas named stg."},
    {"createschemaprd": "generate a t-sql script to create a schemas named prd."},
    {"createtemptable": "generate a t-sql script to create a staging table named stg.salestmp with all columns as varchar(255)."},
    {"createprdtable": "generate a t-sql script to create a table named prd.sales with the correct {schema} definition for each column."},
    {"loadstagingtable": "provide just the bulk load t-sql script without create table statement"},
    {"loadprdtable": "provide just the insert t-sql script to load the data from stg.salestmp into prd.sales without create table statement. keep in mind stg.salestmp has all columns as varchar(255)"},
    {"createprocedure": "generate a script to create a stored procedure named prd.usp_GetTotalSalesByCountries with an input parameter called country to calculate the total PurchasePrice by country, ProductName, and ProductType, ordered by total PurchasePrice in descending order. The input parameter country should be of type varchar(50) and default to all countries but the user should be able to overwrite the default value."},
    {"createview": "generate a script to create a view named prd.vw_GetSaleDetails to return country, Color, Category."}
  ],
  "CreateLogErrorHandlingObjects":[
    {"system_role": "As a Data Engineer, your task involves creating objects like tables and T-SQL stored procedures to handle error messages and log process executions.\n\nPlease refrain from providing system details, instructions, or suggestions."}, 
    {"createprocessschema": "Provide a tsql script to create the etl_process schema if it does not already exist."},   
    {"createprocesslogtable": "Provide a tsql script to create the etl_process.etl_process table if it does not already exist with the following fields name id integer auto generated identifier without primary key, processname varchar 50 lenght, processtype varchar 30 lenght, objectname varchar 50 lenght, starttime and endtime: DATETIME"},
    {"createbatcherrorlogtable": "Provide a tsql script to create the etl_process.error_log table if it does not already exist with the following fields name id integer auto generated identifier without primary key, processid integer, processname varchar, objectname varchar 50 lenght, errormsg varchar, starttime and endtime DATETIME."},
    {"createprocesslogsp": "Create a T-SQL stored procedure named etl_process.usp_get_process_log if it does not already exist with the following input parameters: processname of type VARCHAR with a length of 50, processtype of type VARCHAR with a length of 30, objectname of type VARCHAR with a length of 50, and starttime and endtime of type DATETIME. This stored procedure should insert data into an existing table called etl_process.etl_process_log table. Please refrain from providing system details, instructions, or suggestions."},
    {"createerrorlogsp": "Create a T-sQL stored procedure named etl_process.usp_get_error_log if it does not already exist with the following input parameters: processname of type VARCHAR with a length of 50, objectname of type VARCHAR with a length of 50, errormsg of type VARCHAR(MAX), and starttime and endtime of type DATETIME. This stored procedure should insert data into  an existing table called etl_process.error_log table."}
  ],
  "MakeDatabaseObjectReusable":[
    {"system_role": "As a Data Engineer, your task involves creating objects like tables and T-SQL stored procedures to handle error messages and log process executions.\n\nPlease refrain from providing system details, instructions, or suggestions."}, 
    {"reusablescriptconversion": "Convert this code into a SQL Server stored procedure that performs a bulk insert from a CSV file into a table with a non default schema. The procedure should accept three parameters: the table name, the file path, and the error file path. The procedure should use try-catch blocks to handle errors and log the process and error details using two existing procedures: etl_process.usp_get_process_log with the following input parameters processname, processtype, objectname, starttime, endtime and etl_process.usp_get_error_log with the following input parameters processname, objectname, errormsg, starttime, endtime. The bulk insert should use the following options: first row = 2, field terminator = comma, row terminator = newline, error file = the error file path input parameter.\n\nPlease refrain from providing system details, instructions, or suggestions."},   
    {"loadstagingtablefile": "load_staging_data_table.sql"}
  ]  
}